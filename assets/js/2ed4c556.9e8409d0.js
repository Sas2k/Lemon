"use strict";(self.webpackChunklemon_docs=self.webpackChunklemon_docs||[]).push([[371],{3905:(t,e,r)=>{r.d(e,{Zo:()=>u,kt:()=>m});var n=r(7294);function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function a(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function l(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}var p=n.createContext({}),s=function(t){var e=n.useContext(p),r=e;return t&&(r="function"==typeof t?t(e):i(i({},e),t)),r},u=function(t){var e=s(t.components);return n.createElement(p.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var r=t.components,o=t.mdxType,a=t.originalType,p=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),d=s(r),m=o,f=d["".concat(p,".").concat(m)]||d[m]||c[m]||a;return r?n.createElement(f,i(i({ref:e},u),{},{components:r})):n.createElement(f,i({ref:e},u))}));function m(t,e){var r=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=t,l.mdxType="string"==typeof t?t:o,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7926:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const a={},i="Tutorial Part 3: Building the api.",l={unversionedId:"tutorial/tutorial-part-3",id:"tutorial/tutorial-part-3",title:"Tutorial Part 3: Building the api.",description:"Now that we got the basic front-end down.",source:"@site/docs/tutorial/tutorial-part-3.md",sourceDirName:"tutorial",slug:"/tutorial/tutorial-part-3",permalink:"/Lemon/docs/next/tutorial/tutorial-part-3",draft:!1,editUrl:"https://github.com/Sas2k/Lemon/tree/main/docs/Lemon-Docs/docs/tutorial/tutorial-part-3.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tutorial Part 2: Writing the basic components.",permalink:"/Lemon/docs/next/tutorial/tutorial-part-2"},next:{title:"Tutorial Part 4: Storing the requests and Displaying them as Posts",permalink:"/Lemon/docs/next/tutorial/tutorial-part-4"}},p={},s=[],u={toc:s};function c(t){let{components:e,...r}=t;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"tutorial-part-3-building-the-api"},"Tutorial Part 3: Building the api."),(0,o.kt)("p",null,"Now that we got the basic front-end down."),(0,o.kt)("p",null,"We now have to focus on the back-end, which is the API."),(0,o.kt)("p",null,"let's start of by creating a routes called /api/get and /api/post"),(0,o.kt)("p",null,"so the basic decorator to create the route is."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'@app.route("/route")\ndef route(request, response):\n    response.text = "route"\n')),(0,o.kt)("p",null,"now since /api/get is uses a ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," method we can just make it a normal route."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'@app.route("/api/get/{post_id:d}") # the {post_id} is an argument in the url. the d means digit.\ndef api_get(request, response, post_id):\n    #for now let\'s just return the post_id\n    response.json = { "post_id": post_id }\n')),(0,o.kt)("p",null,"now for the /api/post we have to use a class for this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@app.route('/app/post/')\nclass api_post():\n    def get(self, req, res):\n        res.text = \"method not allowed\"\n    def post(self, req, res):\n        print(req.json)\n")),(0,o.kt)("p",null,"here the body of the request is printed.\nnow the basic api is implemented let's move to part 4."))}c.isMDXComponent=!0}}]);