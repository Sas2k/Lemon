"use strict";(self.webpackChunklemon_docs=self.webpackChunklemon_docs||[]).push([[371],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(r),m=o,f=d["".concat(l,".").concat(m)]||d[m]||c[m]||a;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7926:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const a={},i="Tutorial Part 3: Building the api.",p={unversionedId:"tutorial/tutorial-part-3",id:"tutorial/tutorial-part-3",title:"Tutorial Part 3: Building the api.",description:"Now that we got the basic front-end down.",source:"@site/docs/tutorial/tutorial-part-3.md",sourceDirName:"tutorial",slug:"/tutorial/tutorial-part-3",permalink:"/Lemon/docs/tutorial/tutorial-part-3",draft:!1,editUrl:"https://github.com/Sas2k/Lemon/tree/main/docs/Lemon-Docs/docs/tutorial/tutorial-part-3.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tutorial Part 2: Writing the basic components.",permalink:"/Lemon/docs/tutorial/tutorial-part-2"}},l={},s=[],u={toc:s};function c(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"tutorial-part-3-building-the-api"},"Tutorial Part 3: Building the api."),(0,o.kt)("p",null,"Now that we got the basic front-end down."),(0,o.kt)("p",null,"We now have to focus on the back-end, which is the API."),(0,o.kt)("p",null,"let's start of by creating a routes called /api/get and /api/post"),(0,o.kt)("p",null,"so the basic decorator to create the route is."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'@app.route("/route")\ndef route(request, response):\n    response.text = "route"\n')),(0,o.kt)("p",null,"now since /api/get is uses a ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," method we can just make it a normal route."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'@app.route("/api/get/{post_id:d}") # the {post_id} is an argument in the url. the d means digit.\ndef api_get(request, response, post_id):\n    #for now let\'s just return the post_id\n    response.json = { "post_id": post_id }\n')),(0,o.kt)("p",null,"now for the /api/post we have to use a class for this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@app.route('/app/post/')\nclass api_post():\n    def get(self, req, res):\n        res.text = \"method not allowed\"\n    def post(self, req, res):\n        print(req.body)\n")),(0,o.kt)("p",null,"here the body of the request is printed.\nnow the basic api is implemented let's move to part 4 (implemented soon...)"))}c.isMDXComponent=!0}}]);